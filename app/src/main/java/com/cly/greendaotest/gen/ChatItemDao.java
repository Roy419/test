package com.cly.greendaotest.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.goodsure.frameworkdemo.model.ChatItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_ITEM".
*/
public class ChatItemDao extends AbstractDao<ChatItem, Void> {

    public static final String TABLENAME = "CHAT_ITEM";

    /**
     * Properties of entity ChatItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FromName = new Property(0, String.class, "fromName", false, "FROM_NAME");
        public final static Property ToName = new Property(1, String.class, "toName", false, "TO_NAME");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property Id = new Property(4, long.class, "id", false, "ID");
        public final static Property Date = new Property(5, long.class, "date", false, "DATE");
        public final static Property IsWhether = new Property(6, boolean.class, "isWhether", false, "IS_WHETHER");
        public final static Property MsgId = new Property(7, long.class, "msgId", false, "MSG_ID");
    }


    public ChatItemDao(DaoConfig config) {
        super(config);
    }
    
    public ChatItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_ITEM\" (" + //
                "\"FROM_NAME\" TEXT," + // 0: fromName
                "\"TO_NAME\" TEXT," + // 1: toName
                "\"CONTENT\" TEXT," + // 2: content
                "\"URL\" TEXT," + // 3: url
                "\"ID\" INTEGER NOT NULL ," + // 4: id
                "\"DATE\" INTEGER NOT NULL ," + // 5: date
                "\"IS_WHETHER\" INTEGER NOT NULL ," + // 6: isWhether
                "\"MSG_ID\" INTEGER NOT NULL );"); // 7: msgId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatItem entity) {
        stmt.clearBindings();
 
        String fromName = entity.getFromName();
        if (fromName != null) {
            stmt.bindString(1, fromName);
        }
 
        String toName = entity.getToName();
        if (toName != null) {
            stmt.bindString(2, toName);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
        stmt.bindLong(5, entity.getId());
        stmt.bindLong(6, entity.getDate());
        stmt.bindLong(7, entity.getIsWhether() ? 1L: 0L);
        stmt.bindLong(8, entity.getMsgId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatItem entity) {
        stmt.clearBindings();
 
        String fromName = entity.getFromName();
        if (fromName != null) {
            stmt.bindString(1, fromName);
        }
 
        String toName = entity.getToName();
        if (toName != null) {
            stmt.bindString(2, toName);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
        stmt.bindLong(5, entity.getId());
        stmt.bindLong(6, entity.getDate());
        stmt.bindLong(7, entity.getIsWhether() ? 1L: 0L);
        stmt.bindLong(8, entity.getMsgId());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChatItem readEntity(Cursor cursor, int offset) {
        ChatItem entity = new ChatItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // fromName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // toName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
            cursor.getLong(offset + 4), // id
            cursor.getLong(offset + 5), // date
            cursor.getShort(offset + 6) != 0, // isWhether
            cursor.getLong(offset + 7) // msgId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatItem entity, int offset) {
        entity.setFromName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setToName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.getLong(offset + 4));
        entity.setDate(cursor.getLong(offset + 5));
        entity.setIsWhether(cursor.getShort(offset + 6) != 0);
        entity.setMsgId(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChatItem entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChatItem entity) {
        return null;
    }

    @Override
    public boolean hasKey(ChatItem entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
